int evenement(int* terminer, int** carte,SDL_Rect* positionSouris,int* direction,Contenu* C,int* fromage,int* position){
     SDL_Event event;

      while (SDL_PollEvent(&event)){


      
            
            switch(event.type)
            {
                case SDL_QUIT:
                printf("on quitte");
                *fromage=0;
                *terminer=1;
                return 1;
                break;

                case SDL_KEYDOWN:
                switch(event.key.keysym.sym)
                {   
                    case SDLK_UP:
                    if(*direction==DROITE || *direction==GAUCHE){                        
                        printf("key up");
                        if (positionSouris->y-1 < 0){
                            return 0;
                            break;
                        }
                        else if (carte[positionSouris->y-1][positionSouris->x] == MUR){
                            return 0;
                             break;
                        }                             
                        else {       
                            int h=positionSouris->y;
                            while (carte[positionSouris->y-1][positionSouris->x]!=MUR)
                            {   
                                (positionSouris->y)--;
                                if (positionSouris->y==0){
                                    positionSouris->y=h;
                                    return 0;    
                                    break;
                                }
                                else if (carte[positionSouris->y][positionSouris->x]==PORTE){
                                    carte[h][positionSouris->x]=CIEL;
                                    afficheJeu(C, carte, *direction);
                                    win(fromage);
                                    *terminer=1;
                                    return 1;
                                    break;
                                }
                                else if (carte[positionSouris->y][positionSouris->x]==PIEGE){
                                        carte[h][positionSouris->x]=CIEL;
                                        afficheJeu(C, carte, *direction);
                                        gameOver();
                                        *terminer=1;
                                        return 1;
                                        break;
                                }
                                    
                            }
                            carte[h][positionSouris->x]=CIEL;
                            carte[positionSouris->y][positionSouris->x]=SOURIS;
                            afficheJeu(C,carte,*direction);
                            *position=BAS;
                            return 1;
                            
                        }
                    }
                    break;                    
                        
                        

                    case SDLK_DOWN:
                        printf("key down");
                    if(*direction==DROITE || *direction==GAUCHE){
                        if (positionSouris->y+1 >= NB_BLOCS_HAUTEUR){
                            return 0;
                            break;
                        }
                        else if (carte[positionSouris->y+1][positionSouris->x] == MUR){
                            return 0;
                            break;
                        }
                        else {
                            int g=positionSouris->y;
                            while (carte[positionSouris->y+1][positionSouris->x]!=MUR)
                            {
                                (positionSouris->y)++;
                                if (positionSouris->y==NB_BLOCS_HAUTEUR){
                                    printf("trop bas");
                                    positionSouris->y=g;
                                    return 0;
                                    break;
                                }
                                else if (carte[positionSouris->y][positionSouris->x]==PORTE){
                                    printf("porte\n");
                                    carte[g][positionSouris->x]=CIEL;
                                     afficheJeu(C, carte, *direction);
                                     win(fromage);
                                    *terminer=1;
                                    return 1;
                                    break;
                                }
                                else if (carte[positionSouris->y][positionSouris->x]==PIEGE){
                                    printf("piege\n");
                                    carte[g][positionSouris->x]=CIEL;
                                     afficheJeu(C, carte, *direction);
                                     gameOver();
                                    *fromage=0;
                                    *terminer=1;
                                    return 1;
                                    break;
                                }
                           
                            } 
                            carte[g][positionSouris->x]=CIEL;
                             carte[positionSouris->y][positionSouris->x]=SOURIS;
                             *position=HAUT;
                             printf("on passe ici\n");
                             afficheJeu(C,carte,*direction);  
                            
                             return 1;              
                        }                    
                    }
                    break;
                       
                }         
               
                break; 
            }
        }   
    return 0;
}

SDL_Rect* prochaineCoordonnees(Souris* souris,int** carte){

    SDL_Rect* prochaineCoordonnees;

    int t = doitTourner(carte);
    int d = souris->direction;
    int p = souris->position;

    if(p%2 == d%2){
        return NULL;
    }

    if(estFaceMur(carte)){
        returnsouris->coordonneeActuelle;
    }

    prochaineCoordonnees->x = (t+d%2)*((1-t)*(2-d)+t*((1-d%2)*((p%3-1)*(p%3-2)-(p%3))+(d%2)*(2-d)));
    prochaineCoordonnees->x /= fabs(prochaineCoordonnees->x);
    prochaineCoordonnees->x +=souris->coordonneeActuelle->x;
    prochaineCoordonnees->y = (t+1-(d%2))*((1-t)*(d-1)+t*((1-d%2)*(d-1)+(d%2)*((p%3-1)*(p%3-2)-(p%3))));
    prochaineCoordonnees->y /= fabs(prochaineCoordonnees->y);
    prochaineCoordonnees->y +=souris->coordonneeActuelle->y;

    return prochaineCoordonnees;

}

int doitTourner(Souris* souris,int** carte){
    if(estFaceMur(carte))
        return 1;
    switch(d){
        case HAUT:return(carte[souris->coordonneeActuelle->y-1][souris->coordonneeActuelle->x+1]==CIEL && carte[souris->coordonneeActuelle->y-1][souris->coordonneeActuelle->x-1]==CIEL);
        break;
        case DROITE:return(carte[souris->coordonneeActuelle->y+1][souris->coordonneeActuelle->x+1]==CIEL && carte[souris->coordonneeActuelle->y-1][souris->coordonneeActuelle->x+1]==CIEL);
        break;
        case BAS:return(carte[souris->coordonneeActuelle->y+1][souris->coordonneeActuelle->x+1]==CIEL && carte[souris->coordonneeActuelle->y+1][souris->coordonneeActuelle->x-1]==CIEL);
        break;
        case GAUCHE:return(carte[souris->coordonneeActuelle->y+1][souris->coordonneeActuelle->x-1]==CIEL && carte[souris->coordonneeActuelle->y-1][souris->coordonneeActuelle->x-1]==CIEL);
        break;
    }
    return -1;

}

int estFaceMur(Souris* souris,int** carte){
    return(carte[souris->coordonneeActuelle->y+((1-(souris->direction)%2)*(d-1))][souris->coordonneeActuelle->x+(((souris->direction)%2)*(2-(souris->direction)))]==MUR);
}

int prochaineDirection(Souris* souris,int** carte){
    if(estFaceMur(souris,carte))
        return (souris->position);

    if(doitTourner(souris,carte) == 0)
        return (souris->direction);

    if((souris->direction)%2 == 1 && prochaineCoordonnees(souris,carte)->y < souris->coordonneeActuelle->y)
        return HAUT;
    else if((souris->direction)%2)
        return BAS;
    else if((souris->direction)%2 == 0 && prochaineCoordonnees(souris,carte)->x < souris->coordonneeActuelle->x) 
        return GAUCHE;
    else
        return DROITE;
}

int prochainePosition(Souris* souris,int** carte){
    if(doitTourner(souris,carte) == 0)
        return (souris->position);
    if(estFaceMur(souris,carte))
        return ((souris->direction)+2)%4;
    return (souris->direction);
